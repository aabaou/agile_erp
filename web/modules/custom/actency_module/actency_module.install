<?php

/**
 * @file: Contains all deployment operations for a properly configured website.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Create the required terms for qec sessions vocabulary.
 */
function actency_module_update_8001(&$sandbox) {

  $terms = [
    'Planifiée',
    'En cours',
    'Suspendue',
    'Terminée',
  ];

  $weight = 0;
  foreach($terms as $termName) {
    $term = taxonomy_term_load_multiple_by_name($termName, 'qec_session_status');

    if (empty($term)) {
      $term = Term::create(
        [
          'name' => $termName,
          'vid' => 'qec_session_status',
          'weight' => $weight,
        ]
      )->save();
      $weight++;
    }
  }
}

/**
 * Create the required menu links for the different admin roles.
 */
function actency_module_update_8002(&$sandbox) {
  $links = [
    ['Commission recrutement', 'internal:/',['pilote_recrutement', 'gestionnaire']],
    ['Candidature recrutement', 'internal:/', ['partenaire_emploi', 'gestionnaire']],
    ['Aide au recrutement', 'internal:/', ['entreprise', 'gestionnaire']],
    ['Vivier de candidats', 'internal:/', ['recruteur_entreprise', 'gestionnaire']]
  ];

  $weight = 0;
  foreach($links as $link) {
    $menuLink = \Drupal::entityTypeManager()->getStorage('menu_link_content')
      ->loadByProperties(['title' => $link[0]]);

    if (empty($menuLink)) {
      $menuLink = MenuLinkContent::create(
        [
          'title' => $link[0],
          'link' => ['uri' => $link[1]],
          'menu_name' => 'menu-user-role',
          'expanded' => TRUE,
          'menu_per_role__show_role' => $link[2],
          'weight' => $weight,
        ]
      );
      $menuLink->save();
      $weight++;
    }
  }
}

/**
 * Create the menu links for each required entry in the different admin menus.
 */
function actency_module_update_8003(&$sandbox) {
  $links = [
    'Commission recrutement' => [
      ['Créer un canal de candidature', 'internal:/',['pilote_recrutement', 'gestionnaire']],
      ['Gérer les canaux de candidature', 'internal:/',['pilote_recrutement', 'gestionnaire']],
      ['Créer une session de la commission', 'internal:/node/add/qec_session',['pilote_recrutement', 'gestionnaire']],
      ['Gérer les sessions de la commission', 'internal:/sessions-qec',['pilote_recrutement', 'gestionnaire']],
      ['Clore une session de la commission', 'internal:/',['pilote_recrutement', 'gestionnaire']],
      ['Ma participation aux sessions', 'internal:/participations-sessions-qec',['pilote_recrutement', 'gestionnaire']],
      ['Créer un dossier de candidature', 'internal:/',['pilote_recrutement', 'gestionnaire']],
      ['Gérer tous les dossiers de candidature', 'internal:/',['pilote_recrutement', 'gestionnaire']],
      ['Gérer les compétences non répertoriées', 'internal:/',['pilote_recrutement', 'gestionnaire']],
      ['Gérer l’archivage de dossiers', 'internal:/',['pilote_recrutement', 'gestionnaire']],
    ],
    'Candidature recrutement' => [
      ['Créer un dossier de candidature', 'internal:/', ['partenaire_emploi', 'gestionnaire']],
      ['Gérer les dossiers de mes candidats', 'internal:/', ['partenaire_emploi', 'gestionnaire']],
    ],
    'Aide au recrutement' => [
      ['Ma participation aux sessions', 'internal:/participations-sessions-qec', ['entreprise', 'gestionnaire']],
      ['Evaluer un dossier de candidature', 'internal:/', ['entreprise', 'gestionnaire']],
    ],
  ];

  // Loop on parent links.
  foreach($links as $parentName => $parent) {
    $parentLink = \Drupal::entityTypeManager()->getStorage('menu_link_content')
      ->loadByProperties(['title' => $parentName]);

    if (!empty($parentLink)) {
      $parentLink = reset($parentLink);

      // If the parent exists, loop on the children.
      $weight = 0;
      foreach($parent as $child) {
        $childLink = MenuLinkContent::create(
          [
            'title' => $child[0],
            'link' => ['uri' => $child[1]],
            'menu_name' => 'menu-user-role',
            'expanded' => TRUE,
            'menu_per_role__show_role' => $child[2],
            'weight' => $weight,
            'parent' => $parentLink->getPluginId(),
          ]
        );
        $childLink->save();
        $weight++;
      }
    }
  }
}

/**
 * Create the required terms for application channel status vocabulary.
 */
function actency_module_update_8004(&$sandbox) {

  $terms = [
    'Actif',
    'Clos',
    'Archivé',
  ];

  $weight = 0;
  foreach($terms as $termName) {
    $term = taxonomy_term_load_multiple_by_name($termName, 'application_channel_status');

    if (empty($term)) {
      $term = Term::create(
        [
          'name' => $termName,
          'vid' => 'application_channel_status',
          'weight' => $weight,
        ]
      )->save();
      $weight++;
    }
  }
}

/**
 * Update all links that point to an application channel feature.
 */
function actency_module_update_8005(&$sandbox) {
  $links = [
    'Créer un canal de candidature' => 'internal:/node/add/application_channel',
    'Gérer les canaux de candidature' => 'internal:/canaux-candidature',
  ];

  foreach($links as $title => $link) {
    $menuLinks = \Drupal::entityTypeManager()->getStorage('menu_link_content')
      ->loadByProperties(['title' => $title]);

    foreach ($menuLinks as $menuLink) {
      $menuLink->set('link', $link);
      $menuLink->save();
    }
  }
}